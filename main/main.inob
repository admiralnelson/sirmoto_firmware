
/* 
	FSWebServer - Example WebServer with SPIFFS backend for esp8266
	Copyright (c) 2015 Hristo Gochkov. All rights reserved.
	This file is part of the ESP8266/ESP32 WebServer library for Arduino environment.
 
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU
	Lesser General Public License for more details.
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA	02110-1301	USA
	
	upload the contents of the data folder with MkSPIFFS Tool ("ESP8266 Sketch Data Upload" in Tools menu in Arduino IDE)
	or you can upload the contents of a folder if you CD in that folder and run the following command:
	for file in `ls -A1`; do curl -F "file=@$PWD/$file" esp8266fs.local/edit; done
	
	access the sample web page at http://esp8266fs.local
	edit the page by going to http://esp8266fs.local/edit
*/
/*
 * Uploading html, css, javascript, etc.
 * Use curl to upload the files from the SPIFFS data directory.
 *	cd data/
 *	curl -X POST -F "data=@index.htm"		 http://<ESP32 IP address>/edit >/dev/null
 *	curl -X POST -F "data=@graphs.js.gz"	http://<ESP32 IP address>/edit >/dev/null
 *	curl -X POST -F "data=@favicon.ico"	 http://<ESP32 IP address>/edit >/dev/null
 *	curl -X POST -F "data=@edit.htm.gz"	 http://<ESP32 IP address>/edit >/dev/null
 */

#define DBG_OUTPUT_PORT Serial
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiServer.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include <SPIFFS.h>

WebServer server(80);

const char* ssid = "wifi-ssid";
const char* password = "wifi-password";
const char* host = "esp8266fs";

String Jwt = "";
int uptime = 0;

//holds the current upload
File fsUploadFile;

//format bytes
String formatBytes(size_t bytes){
	if (bytes < 1024){
	return String(bytes)+"B";
	} else if(bytes < (1024 * 1024)){
	return String(bytes/1024.0)+"KB";
	} else if(bytes < (1024 * 1024 * 1024)){
	return String(bytes/1024.0/1024.0)+"MB";
	} else {
	return String(bytes/1024.0/1024.0/1024.0)+"GB";
	}
}

String getContentType(String filename){
	if(server.hasArg("download")) return "application/octet-stream";
	else if(filename.endsWith(".htm")) return "text/html";
	else if(filename.endsWith(".html")) return "text/html";
	else if(filename.endsWith(".css")) return "text/css";
	else if(filename.endsWith(".js")) return "application/javascript";
	else if(filename.endsWith(".png")) return "image/png";
	else if(filename.endsWith(".gif")) return "image/gif";
	else if(filename.endsWith(".jpg")) return "image/jpeg";
	else if(filename.endsWith(".ico")) return "image/x-icon";
	else if(filename.endsWith(".xml")) return "text/xml";
	else if(filename.endsWith(".pdf")) return "application/x-pdf";
	else if(filename.endsWith(".zip")) return "application/x-zip";
	else if(filename.endsWith(".gz")) return "application/x-gzip";
	return "text/plain";
}

bool handleFileRead(String path){
	DBG_OUTPUT_PORT.println("handleFileRead: " + path);
	if(path.endsWith("/")) path += "index.htm";
	String contentType = getContentType(path);
	String pathWithGz = path + ".gz";
	if(SPIFFS.exists(pathWithGz) || SPIFFS.exists(path)){
	if(SPIFFS.exists(pathWithGz))
		path += ".gz";
	File file = SPIFFS.open(path, "r");
	size_t sent = server.streamFile(file, contentType);
	file.close();
	return true;
	}
	return false;
}

void handleFileUpload(){
	if(server.uri() != "/edit") return;
	HTTPUpload& upload = server.upload();
	if(upload.status == UPLOAD_FILE_START)
	{
	String filename = upload.filename;
	if(!filename.startsWith("/")) filename = "/"+filename;
	DBG_OUTPUT_PORT.print("handleFileUpload Name: "); DBG_OUTPUT_PORT.println(filename);
	fsUploadFile = SPIFFS.open(filename, "w");
	filename = String();
	} 
	else if(upload.status == UPLOAD_FILE_WRITE)
	{
	//DBG_OUTPUT_PORT.print("handleFileUpload Data: "); DBG_OUTPUT_PORT.println(upload.currentSize);
	if(fsUploadFile)
		fsUploadFile.write(upload.buf, upload.currentSize);
	} else if(upload.status == UPLOAD_FILE_END){
	if(fsUploadFile)
		fsUploadFile.close();
	DBG_OUTPUT_PORT.print("handleFileUpload Size: "); DBG_OUTPUT_PORT.println(upload.totalSize);
	}
}

void handleFileDelete(){
	if(server.args() == 0) return server.send(500, "text/plain", "BAD ARGS");
	String path = server.arg(0);
	DBG_OUTPUT_PORT.println("handleFileDelete: " + path);
	if(path == "/")
	return server.send(500, "text/plain", "BAD PATH");
	if(!SPIFFS.exists(path))
	return server.send(404, "text/plain", "FileNotFound");
	SPIFFS.remove(path);
	server.send(200, "text/plain", "");
	path = String();
}

void handleFileCreate(){
	if(server.args() == 0)
	return server.send(500, "text/plain", "BAD ARGS");
	String path = server.arg(0);
	DBG_OUTPUT_PORT.println("handleFileCreate: " + path);
	if(path == "/")
	return server.send(500, "text/plain", "BAD PATH");
	if(SPIFFS.exists(path))
	return server.send(500, "text/plain", "FILE EXISTS");
	File file = SPIFFS.open(path, "w");
	if(file)
	file.close();
	else
	return server.send(500, "text/plain", "CREATE FAILED");
	server.send(200, "text/plain", "");
	path = String();
}

void returnFail(String msg) {
	server.send(500, "text/plain", msg + "\r\n");
}

void handleFileList() {
	if(!server.hasArg("dir")) {
	returnFail("BAD ARGS");
	return;
	}
	String path = server.arg("dir");
	if(path != "/" && !SPIFFS.exists((char *)path.c_str())) {
	returnFail("BAD PATH");
	return;
	}
	File dir = SPIFFS.open((char *)path.c_str());
	path = String();
	if(!dir.isDirectory()){
	dir.close();
	returnFail("NOT DIR");
	return;
	}
	dir.rewindDirectory();

	String output = "[";
	for (int cnt = 0; true; ++cnt) {
	File entry = dir.openNextFile();
	if (!entry)
	break;

	if (cnt > 0)
		output += ',';

	output += "{\"type\":\"";
	output += (entry.isDirectory()) ? "dir" : "file";
	output += "\",\"name\":\"";
	// Ignore '/' prefix
	output += entry.name()+1;
	output += "\"";
	output += "}";
	entry.close();
	}
	output += "]";
	server.send(200, "text/json", output);
	dir.close();
}

void listDir(fs::FS &fs, const char * dirname, uint8_t levels) {
	DBG_OUTPUT_PORT.printf("Listing directory: %s\n", dirname);

	File root = fs.open(dirname);
	if (!root) {
	DBG_OUTPUT_PORT.println("Failed to open directory");
	return;
	}
	if (!root.isDirectory()) {
	DBG_OUTPUT_PORT.println("Not a directory");
	return;
	}

	File file = root.openNextFile();
	while (file) {
	if (file.isDirectory()) {
		DBG_OUTPUT_PORT.print("	DIR : ");
		DBG_OUTPUT_PORT.println(file.name());
		if (levels) {
		listDir(fs, file.name(), levels - 1);
		}
	} else {
		DBG_OUTPUT_PORT.print("	FILE: ");
		DBG_OUTPUT_PORT.print(file.name());
		DBG_OUTPUT_PORT.print("	SIZE: ");
		DBG_OUTPUT_PORT.println(file.size());
	}
	file = root.openNextFile();
	}
}

String printDigits(byte digits)
{
	Serial.print(":");
 	if(digits < 10)
	   Serial.print('0');
 	Serial.print(digits,DEC);  
}

String Uptime()
{
	long timeNow = millis();
	int days = timeNow / 86400 ;                                //number of days
	int hours = (timeNow % 86400) / 3600;                       //the remainder from days division (in milliseconds) divided by hours,
	int minutes = ((timeNow % 86400) % 3600) / 60;         //and so on...
	int seconds = (((timeNow % 86400) % 3600) % 60) / 1;

 	Serial.print(days,DEC);
	return printDigits(hours) +":"+printDigits(minutes)+":"+printDigits(seconds); 

 
}


String Head()
{
	String out;
	out = " ";
	out += "	<html>";
	out +="		<head>";
	out +="			<style>";
	out +="				body{";
	out +="				}";
	out +="				body{";
	out +="				}";
	out +="			</style>";
	out +="		</head>";
	out +="		<body>";
	out +="			<div>";
	out +="				<span><a href=\"index\" >Home</a></span> | ";
	out +="				<span><a href=\"settings\">Setting</a></span> | ";
	out +="				<span><a href=\"account\">Account</a></span> | " ;
	out +="			</div>	";
	return out;
}


String Foot()
{
	String out;
	out = " " ;
	out +="		</body>";
	out +="	</html>";
	return out;
}

void Index()
{
	String out = "";
	
	//out += Head(); 
	out += " " ;
	out +="	<div>";
	out +="		<h1>Home</h1>";
	out +="		<p>";
	out +="	";
	out += "<ul>";
	out += "	<li>";
	out +="	  IP:" + WiFi.localIP();
	out += "	</li>";
	out += "	<li>";
	out += 			"Status:";
	out += 			((String(WiFi.SSID()) != String(ssid)) ? "Soft access point" : "Connected");
	out += "	</li>";
	out += "	<li>";
	out += 			"Uptime:" +  Uptime();
	out += "	</li>";
	out += "</ul>";
	out += " " ;
	out +="		</p>";
	out +="	</div>";
	"";
	//out += Foot();
	server.send(200, "text/html", out);
}

void ConfigWifi()
{
	String out = "";
	//out += Head(); 
	out += " " ;
	out +="	<div>"; 
	out +="		<h1>Home</h1>";
	out +="		<p>";
	out +="	";
	out += "<ul>";
	out += "	<li>"+
	out += "		IP:" + WiFi.localIP();
	out += "	</li>";
	out += "	<li>";
	out += 			"Status:" + (String(WiFi.SSID()) != String(ssid)) ? "Soft access point" : "Connected";
	out += "	</li>";
	out += "	<li>";
	out += 			"Uptime:" +  Uptime();
	out += "	</li>";
	out += "</ul>";
	out += "	";
	out +="		</p>";
	out +="	</div>" ;
	out +=" ";
	//out += Foot();
	server.send(200, "text/html", out);
}
void Settings()
{

}
void Logon()
{

}
void Status()
{

}
void FirmWareUpdate()
{

}


void setup(void){
	DBG_OUTPUT_PORT.begin(115200);
	DBG_OUTPUT_PORT.print("\n");
	DBG_OUTPUT_PORT.setDebugOutput(true);
	SPIFFS.begin();
	{
	listDir(SPIFFS, "/", 0);
	DBG_OUTPUT_PORT.printf("\n");
	}


	//WIFI INIT
	DBG_OUTPUT_PORT.printf("Connecting to %s\n", ssid);
	if (String(WiFi.SSID()) != String(ssid)) {
		WiFi.softAP(ssid, password);
	}
	
	//while (WiFi.status() != WL_CONNECTED) {
	//	delay(500);
	//	DBG_OUTPUT_PORT.print(".");
	//}
	DBG_OUTPUT_PORT.println("");
	DBG_OUTPUT_PORT.print("Connected! IP address: ");
	DBG_OUTPUT_PORT.println(WiFi.localIP());

	MDNS.begin(host);
	DBG_OUTPUT_PORT.print("Open http://");
	DBG_OUTPUT_PORT.print(host);
	DBG_OUTPUT_PORT.println(".local/edit to see the file browser");
	
	
	//SERVER INIT
	//list directory
	server.on("/list", HTTP_GET, handleFileList);
	//load editor
	server.on("/edit", HTTP_GET, [](){
	if(!handleFileRead("/edit.htm")) server.send(404, "text/plain", "FileNotFound");
	});
	//create file
	server.on("/edit", HTTP_PUT, handleFileCreate);
	//delete file
	server.on("/edit", HTTP_DELETE, handleFileDelete);
	//first callback is called after the request has ended with all parsed arguments
	//second callback handles file uploads at that location
	server.on("/edit", HTTP_POST, [](){ server.send(200, "text/plain", ""); }, handleFileUpload);
	server.on("/index", HTTP_GET, Index);

	//called when the url is not defined here
	//use it to load content from SPIFFS
	server.onNotFound([](){
	if(!handleFileRead(server.uri()))
		server.send(404, "text/plain", "FileNotFound");
	});

	//get heap status, analog input value and all GPIO statuses in one json call
	server.on("/all", HTTP_GET, [](){
	String json = "{";
	json += "\"heap\":"+String(ESP.getFreeHeap());
	json += ", \"analog\":"+String(analogRead(A0));
	json += "}";
	server.send(200, "text/json", json);
	json = String();
	});
	server.begin();
	DBG_OUTPUT_PORT.println("HTTP server started");

}
 
void loop(void){
	server.handleClient();
}
